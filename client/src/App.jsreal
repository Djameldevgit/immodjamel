import { useEffect, useState } from 'react'
import {BrowserRouter as Router, Route} from 'react-router-dom'

import PageRender from './customRouter/PageRender'
import PrivateRouter from './customRouter/PrivateRouter'
 
import Home from './pages/home'
import Login from './pages/login'
import Register from './pages/register'

import Alert from './components/alert/Alert'
import Header from './components/header/Header'
import StatusModal from './components/StatusModal'

import { useSelector, useDispatch } from 'react-redux'
import { refreshToken } from './redux/actions/authAction'
import { getPosts, POST_TYPES } from './redux/actions/postAction'
import { getSuggestions } from './redux/actions/suggestionsAction'

import io from 'socket.io-client'
import { GLOBALTYPES } from './redux/actions/globalTypes'
import SocketClient from './SocketClient'

import { getNotifies } from './redux/actions/notifyAction'
import CallModal from './components/message/CallModal'
 
import { getDataAPI } from './utils/fetchData';
import Edicionusers from './pages/administration/users/edicionusers'
import { getUsers } from './redux/actions/userAction'
import UsersActionn from './pages/administration/users/UsersActionn'
import listadeusuariosbloqueadoss from './pages/administration/users/listadeusuariosbloqueadoss'
import { getBlockedUsers } from './redux/actions/userBlockAction'
import Paginabloqueos from './pages/paginabloqueos'
import Roles from './pages/administration/users/roles'
import Homepostspendientes from './pages/administration/homepostspendientes'
import { getPostsPendientes } from './redux/actions/postAproveAction'






function App() {
  const { auth, status, modal, call } = useSelector(state => state)
  const dispatch = useDispatch();
  const [searchTerm, setSearchTerm] = useState('');
  const [titleSearch, setTitleSearch] = useState('');
  const [wilaya, setWilaya] = useState('');
  const [commune, setCommune] = useState('');

  useEffect(() => {
    dispatch(refreshToken());
    const socket = io();
    dispatch({ type: GLOBALTYPES.SOCKET, payload: socket });
    return () => socket.close();
  }, [dispatch]);

  useEffect(() => {
    if (auth.token) {
      dispatch(getPosts(auth.token, 'Vente'));
      dispatch(getSuggestions(auth.token));
      dispatch(getNotifies(auth.token));
      dispatch(getUsers(auth.token));
      dispatch(getBlockedUsers(auth.token));
      dispatch(getPostsPendientes(auth.token));
    }
  }, [dispatch, auth.token]);

  const handleSearch = async () => {
    let query = 'posts';

    if (searchTerm) query += `?subCategory=${searchTerm}`;
    if (titleSearch) query += `${query.includes('?') ? '&' : '?'}title=${titleSearch}`;
    if (wilaya) query += `${query.includes('?') ? '&' : '?'}wilaya=${wilaya}`;
    if (commune) query += `${query.includes('?') ? '&' : '?'}commune=${commune}`;

    const res = await getDataAPI(query, auth.token);

    dispatch({
      type: POST_TYPES.GET_POSTS,
      payload: { ...res.data, page: 1 },
    });
  };

  const handleReset = async () => {
    setSearchTerm('');
    setTitleSearch('');
    setWilaya('');
    setCommune('');

    const res = await getDataAPI('posts?subCategory=Vente', auth.token);

    dispatch({
      type: POST_TYPES.GET_POSTS,
      payload: { ...res.data, page: 1 },
    });
  };

  return (
    <Router>
        <Alert />
        <div className={`App ${(status || modal) && 'mode'}`}>
        <div className="main">
        {status && <StatusModal />}
          {auth.token && <SocketClient />}
          {call && <CallModal />}


          {auth.token && (
            <Header
              onReset={handleReset}
              onSearch={handleSearch}
              onDropdownChange={(e) => setSearchTerm(e.target.value)}
              onTitleChange={(e) => setTitleSearch(e.target.value)}
              onWilayaChange={(wilaya) => setWilaya(wilaya)}
              onCommuneChange={(commune) => setCommune(commune)}
              searchTerm={searchTerm}
              titleSearch={titleSearch}
              wilaya={wilaya}
              commune={commune}
            />
          )}
           <Route exact path="/" component={auth.token ? Home : Login} />
          <Route exact path="/register" component={Register} />

          <Route exact path="/register" component={Register} />
          <Route exact path="/administration/usersaction" component={auth.token ? UsersActionn : Login} />
          <Route exact path="/administration/usersedicion" component={auth.token ? Edicionusers : Login} />
          <Route exact path="/administration/listadeusuariosbloqueadoss" component={auth.token ? listadeusuariosbloqueadoss : Login} />
          <Route exact path="/paginabloqueos" component={auth.token ? Paginabloqueos : Login} />
          <Route exact path="/administration/roles" component={auth.token ? Roles : Login} />
          <Route exact path="/administracion/homepostspendientes" component={auth.token ? Homepostspendientes : Login} />
   


          <PrivateRouter exact path="/:page" component={PageRender} />
          <PrivateRouter exact path="/:page/:id" component={PageRender} />
        </div>
      </div>
    </Router>
  );
}

export default App;